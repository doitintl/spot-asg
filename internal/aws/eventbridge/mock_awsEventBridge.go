// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package eventbridge

import (
	context "context"

	"github.com/aws/aws-sdk-go/service/eventbridge"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"
)

// mockAwsEventBridge is an autogenerated mock type for the awsEventBridge type
type mockAwsEventBridge struct {
	mock.Mock
}

// PutEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockAwsEventBridge) PutEventsWithContext(_a0 context.Context, _a1 *eventbridge.PutEventsInput, _a2 ...request.Option) (*eventbridge.PutEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eventbridge.PutEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eventbridge.PutEventsInput, ...request.Option) *eventbridge.PutEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eventbridge.PutEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eventbridge.PutEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
